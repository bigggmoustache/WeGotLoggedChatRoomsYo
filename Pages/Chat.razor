@page "/chat"
@using BlazorServerSignalApp.Data;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject BlazorServerSignalApp.IService.IChatLogService chatLogService
@inject BlazorServerSignalApp.IService.IUserService userService
@inject BlazorServerSignalApp.IService.IServerService serverService
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

<div class="top-container">
    <span>
        
        Idk what I'm doing lol ¯\_(ツ)_/¯ <span>@selectedGroup</span>
        <button @onclick="DeleteAllDocuments" disabled="@(!IsConnected)">nukeDB</button>
    </span>
    <br />
    <input @bind="createServerName" />
    <span><button @onclick="CreateServer">Create Server</button></span>
    <input @bind="createChannelName" />
    <span><button @onclick="CreateChannel">Create Channel</button></span>

@*    <label>
        Group:
        <input @bind="groupInput" />
        <span><button @onclick="JoinGroup" disabled="@(!IsConnected)">Join</button></span>
    </label>*@
@*    <label>
        User:
        <input @bind="userInput" />
    </label>*@
</div>



<div class="server-container">
    Server List
    @if (userService.CurrentUser.Servers != null && userService.CurrentUser.Servers.Count() > 0)
    {
        <ul>
            @foreach (Data.Server server in userService.CurrentUser.Servers)
            {
                <li><button @onclick="() => JoinServer(server.Name)">@server.Name</button></li>
            }
        </ul>
    }
</div>



<div class="channel-container">
    Channel List
    @if (serverService.CurrentServer.TextChannels != null && serverService.CurrentServer.TextChannels.Count() > 0)
    {
        <ul>
            @foreach (Data.TextChannel channel in serverService.CurrentServer.TextChannels)
            {
                <li><button @onclick="() => JoinChannel(channel.Name)">@channel.Name</button></li>
            }
        </ul>
    }
</div>



<div class="chat-container">
    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
    <button @onclick="SendMessage" disabled="@(!IsConnected)">Send All</button>
    <button @onclick="SendMessageToGroup" disabled="@(!IsConnected)">Send Group</button>
</div>
<div class="user-container">
    Users tbd
</div>




@code {

    ChatLog chatLog = new ChatLog();
    Data.Server server = new Data.Server();
    Data.Server currentServer = new Data.Server();
    TextChannel textChannel = new TextChannel() { Name = "HAHA YOU CLOWNS" };
    List<ChatLog> groupLogs = new();
    List<string> groups = new() { "Default" };
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;
    private string? groupInput;
    private string groupSelected = "HAHA YOU CLOWNS";
    private string? selectedGroup;
    private string? createServerName;
    private string? createChannelName;

    protected override async Task OnInitializedAsync()
    {
        server = userService.CurrentUser.Servers.FirstOrDefault();
        serverService.JoinServer(server);
        GetGroupChatLogs();
        //GetGroups();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .ConfigureLogging(logging =>
            {
                logging.AddDebug();
                logging.SetMinimumLevel(LogLevel.Debug);
            })
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"TOALL: {user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string, string>("GroupReceiveMessage", (user, message, group) =>
        {
            var encodedMsg = $"{group}: {user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    #region Chat
    private void GetGroupChatLogs()
    {
        messages.Clear();
        groupLogs = chatLogService.GetGroupChatLog(groupSelected);
        foreach (var log in groupLogs)
        {
            var logToMessage = $"{log.Group}: {log.User}: {log.Message}";
            messages.Add(logToMessage);
        };
    }
    private void DeleteAllDocuments()
    {
        chatLogService.DeleteAllDocuments();
        GetGroupChatLogs();
    }

    private void GetGroups()
    {
        //NEED TO COMPLETE
    }


    private async Task SendMessage()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            chatLog.User = userInput;
            chatLog.Message = messageInput;
            chatLogService.SaveOrUpdate(chatLog);
        }
    }

    private async Task SendMessageToGroup()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessageToGroup", userInput, messageInput, groupInput);
            groups.Add(groupInput);
            chatLog.User = userInput;
            chatLog.Message = messageInput;
            chatLog.Group = groupInput;
            chatLogService.SaveOrUpdate(chatLog);
        }
    }

    #endregion

    private async Task JoinGroup()
    {
        await hubConnection.SendAsync("LeaveGroup", groupSelected);
        await hubConnection.SendAsync("JoinGroup", groupInput);
        groupSelected = groupInput;
        GetGroupChatLogs();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    #region ServerAndChannel

    public void CreateServer()
    {
        server.Name = createServerName;
        server.TextChannels.Add(textChannel);
        server.Users.Add(userService.CurrentUser);

        try
        {
            serverService.CreateServer(server, textChannel.Name);
        }
        catch(Exception ex)
        {

        }
        userService.AddServerToUser(userService.CurrentUser, server);

    }
    public async Task JoinServer(string serverName)
    {
        
    }
    public async Task CreateChannel()
    {


    }

    public async Task JoinChannel(string channelName)
    {

    }


    #endregion
}