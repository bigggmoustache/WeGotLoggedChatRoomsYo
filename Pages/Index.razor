@page "/"
@using BlazorServerSignalApp.Data;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject BlazorServerSignalApp.IService.IChatLogService chatLogService
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<div class="form-group">
    <h1>
        Idk what I'm doing lol ¯\_(ツ)_/¯
        <button @onclick="DeleteAllDocuments" disabled="@(!IsConnected)">nukeDB</button>
    </h1>
    <br />
    //TEST SPOT
    <h1>HubConnection Status: @hubConnection.State </h1>
    <br />
    <label>
        Group:
        <input @bind="groupInput" />
        <span><button @onclick="JoinGroup" disabled="@(!IsConnected)">Join</button></span>
    </label>
    <br />
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="SendMessage" disabled="@(!IsConnected)">Send All</button>
<button @onclick="SendMessageToGroup" disabled="@(!IsConnected)">Send Group</button>


<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    ChatLog chatLog = new ChatLog();
    List<ChatLog> groupLogs = new();
    List<string> groups = new() { "Default" };
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;
    private string groupInput;
    private string groupSelected = "Default";
    private string? selectedGroup;

    protected override async Task OnInitializedAsync()
    {
        GetGroupChatLogs();
        //GetGroups();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .ConfigureLogging(logging =>
            {
                logging.AddDebug();
                logging.SetMinimumLevel(LogLevel.Debug);
            })
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"TOALL: {user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string, string>("GroupReceiveMessage", (user, message, group) =>
        {
            var encodedMsg = $"{group}: {user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private void GetGroupChatLogs()
    {
        messages.Clear();
        groupLogs = chatLogService.GetGroupChatLog(groupSelected);
        foreach (var log in groupLogs)
        {
            var logToMessage = $"{log.Group}: {log.User}: {log.Message}";
            messages.Add(logToMessage);
        };
    }
    private void DeleteAllDocuments()
    {
        chatLogService.DeleteAllDocuments();
        GetGroupChatLogs();
    }

    private void GetGroups()
    {
        //NEED TO COMPLETE
    }


    private async Task SendMessage()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            chatLog.User = userInput;
            chatLog.Message = messageInput;
            chatLogService.SaveOrUpdate(chatLog);
        }
    }

    private async Task SendMessageToGroup()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessageToGroup", userInput, messageInput, groupInput);
            groups.Add(groupInput);
            chatLog.User = userInput;
            chatLog.Message = messageInput;
            chatLog.Group = groupInput;
            chatLogService.SaveOrUpdate(chatLog);
        }
    }

    private async Task JoinGroup()
    {
        await hubConnection.SendAsync("LeaveGroup", groupSelected);
        await hubConnection.SendAsync("JoinGroup", groupInput);
        groupSelected = groupInput;
        GetGroupChatLogs();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}